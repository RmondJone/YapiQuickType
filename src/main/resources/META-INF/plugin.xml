<idea-plugin require-restart="true">
    <id>com.guohanlin.yapiquicktype</id>
    <name>Yapi QuickType</name>
    <vendor email="2318560278@qq.com" url="https://rmondjone.github.io/">guohanlin</vendor>
    <product-descriptor code="PYAPIQUICKTYPE" release-date="20230414" release-version="20231"
        optional="true" />
    <resource-bundle>LanguageBundle</resource-bundle>

    <!--插件描述-->
    <description>
        <![CDATA[
            <h1>YApi QuickType Plugin Introduction</h1>
            <h2>1. Description of the plugin</h2>
            <p>In daily development, we will use the tool YApi. YApi is a local deployable, front-end and back-end and QA, visual interface management platform, which can perform some operations of interface definition and interface simulation.</p>
            <p>For more YApi usage tutorials, you can refer to the YApi official website, and I won't go into too much detail here.</p>
            <p>This plug-in is a coding tool plug-in based on the YApi open source interface. It is mainly used for the rapid generation of the interface definition entity code. As long as a simple configuration is performed in the plug-in settings options, you can quickly generate a variety of items you want with one click. The language interface defines entity codes.</p>
            <p>Currently supported languages ​​are: Kotlin, Java, TypeScript, Dart, Swift, Objective-C, Go, C++</p>
            <h2>2. Plug-in configuration and use</h2>
            <h3>Plugin configuration</h3>
            <p>Open the IDE settings page--YApi code generation plug-in, and set the plug-in. The plug-in is set to the following steps:</p>
            <ul>
                 <li><strong>Fill in the self-built address for the YApi root path</strong></li>
                 <li>
                         <strong>Configure the Id and Token of the project you need</strong>
                         <p>These can be found in the YApi project configuration, find and copy and fill in, and the project name can be filled in at will.</p>
                 </li>
                 <li><strong>Restart the IDE for the configuration to take effect</strong></li>
            </ul>
            <h3>Plugin usage</h3>
            <p>After the plug-in configuration is correct, the use of the plug-in is also very simple, just right-click on the directory where you want to generate code to call up the plug-in</p>
            <ul>
                 <li><strong>Click the right-click menu to create a new directory -- YApi code generation plugin</strong></li>
                 <li><strong>Select the corresponding interface of the project you configured and the language you want to generate</strong></li>
                 <li><strong>Enter the generated entity name and click OK to generate the code</strong></li>
            </ul>
            <ul>
                <li><strong>Click the right-click menu to create a new directory - Json to entity plugin</strong></li>
                <li><strong>Paste the copied JSON string</strong></li>
                <li><strong>Enter the generated entity name, select the language you want to generate, and click OK to generate the code</strong></li>
            </ul>
            <p>QuickType service source code：</p>
            <a href="https://github.com/RmondJone/QuickTypeNode">https://github.com/RmondJone/QuickTypeNode</a>
            <br/>
            <br/>
            <h1>YApi QuickType插件介绍</h1>
            <h2>一、插件描述</h2>
            <p>日常开发中，我们会用到YApi这个工具，YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台，可以进行接口定义以及接口模拟的一些操作。</p>
            <p>有关更多的YApi使用教程，可以参考<a href="https://github.com/YMFE/yapi">YApi官网</a>，这里就不再过多的赘述。</p>
            <p>本插件是一个基于YApi开源接口之上的一个编码工具插件，主要用于接口定义实体代码的快速生成，只要在插件设置选项中进行简单的配置，即可一键快速生成多种你想要的语言接口定义实体代码。</p>
            <p>目前支持生成的语言有：Kotlin、Java、TypeScript、Dart、Swift、Objective-C、Go、C++</p>
            <h2>二、插件配置以及使用</h2>
            <h3>插件配置</h3>
            <p>打开IDE设置页面--YApi代码生成插件，进行插件的设置，插件设置为以下几个步骤：</p>
            <ul>
                <li><strong>YApi根路径填入自建的地址</strong></li>
                <li>
                    <strong>配置你需要的项目的Id、Token</strong>
                    <p>这些都可以在YApi项目配置里找到，找到复制填入即可，项目名称可以随意填写。</p>
                </li>
                <li><strong>重启IDE使配置生效</strong></li>
            </ul>
            <h3>插件使用</h3>
            <p>插件配置无误后，插件的使用也非常简单，只需在想要生成代码的目录上右键即可调起插件</p>
            <ul>
                <li><strong>点击右键菜单目录新建-YApi代码生成插件</strong></li>
                <li><strong>选择你配置的项目的对应接口和想要生成的语言</strong></li>
                <li><strong>输入生成的实体名称点击OK生成代码</strong></li>
            </ul>
            <ul>
                <li><strong>点击右键菜单目录新建-Json转实体插件</strong></li>
                <li><strong>粘贴复制的JSON字符串</strong></li>
                <li><strong>输入生成的实体名称、选择想要生成的语言点击OK生成代码</strong></li>
            </ul>
            <p>QuickType服务源码：</p>
            <a href="https://github.com/RmondJone/QuickTypeNode">https://github.com/RmondJone/QuickTypeNode</a>
            <br/>
            <br/>
            <div style="font-size:0"><img src="https://plugins.jetbrains.com/files/18847/screenshot_56dbf4ea-b64e-4ff9-982d-1a2a93f0cb85" width="600"/></div>
            <div style="font-size:0"><img src="https://plugins.jetbrains.com/files/18847/screenshot_d83ff2d1-1ffa-4b68-a7c0-40487fa583c4" width="600"/></div>
            <div style="font-size:0"><img src="https://plugins.jetbrains.com/files/18847/screenshot_e8ff159d-deaa-4354-a526-5874c80fd76b" width="600"/></div>
            <div style="font-size:0"><img src="https://plugins.jetbrains.com/files/18847/screenshot_66f98b03-5374-4e4e-ba38-742656c057ee" width="600"/></div>
            <div style="font-size:0"><img src="https://plugins.jetbrains.com/files/18847/screenshot_db0c3a01-6dda-480d-8ede-27bb11dc0d30" width="600"/></div>
        ]]>
    </description>

    <idea-version since-build="203" />

    <!-- please see https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.lang</depends>

    <extensions defaultExtensionNs="com.intellij">
        <!-- Add your extensions here -->
        <projectConfigurable instance="com.guohanlin.ProjectSettingConfig" />
        <postStartupActivity implementation="com.guohanlin.YApiApplication" />
    </extensions>

    <extensions defaultExtensionNs="com.intellij">
        <notificationGroup id="YApi QuickType Error" displayType="BALLOON" isLogByDefault="true" />
        <notificationGroup id="YApi QuickType Message" displayType="BALLOON"
            isLogByDefault="true" />
    </extensions>

    <project-components>
        <component>
            <implementation-class>com.guohanlin.ProjectSettingConfig</implementation-class>
        </component>
    </project-components>

    <actions>
        <!-- Add your actions here -->
        <action id="com.guohanlin.api" class="com.guohanlin.YApiAction">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFile" />
        </action>
        <action id="com.guohanlin.json" class="com.guohanlin.JsonAction">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFile" />
        </action>
    </actions>
</idea-plugin>
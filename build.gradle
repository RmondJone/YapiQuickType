import proguard.gradle.ProGuardTask

buildscript {
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.6.0'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.intellij.platform' version '2.5.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    intellijPlatform {
        defaultRepositories()
        jetbrainsRuntime()
    }
}

intellijPlatform {
    pluginConfiguration {
        version("2025.1.1")
        id = "com.guohanlin.yapiquicktype"
        name = "Yapi QuickType"
        description = readDescription()
        changeNotes = readChangeLog()
        ideaVersion {
            sinceBuild = "221"
        }
        vendor {
            name = "guohanlin"
            email = "2318560278@qq.com"
            url = "https://rmondjone.github.io/"
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation('com.alibaba:fastjson:1.2.73')
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation('com.squareup.retrofit2:converter-gson:2.9.0')
    implementation('com.squareup.retrofit2:adapter-rxjava2:2.9.0')
    implementation('com.squareup.retrofit2:converter-scalars:2.9.0')
    intellijPlatform {
        intellijIdeaCommunity '2025.1'
        pluginVerifier()
        zipSigner()
        instrumentationTools()
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


/**
 * 获取插件描述
 * @return
 */
def readDescription() {
    def descriptionFile = file("$projectDir/DESCRIPTION.md")
    String content = ""
    descriptionFile.eachLine { line ->
        content = "$content\n$line"
    }
    return content
}

/**
 * 获取插件ChangeLog
 * @return
 */
def readChangeLog() {
    def descriptionFile = file("$projectDir/CHANGELOG.md")
    String content = ""
    descriptionFile.eachLine { line ->
        content = "$content\n$line"
    }
    return content
}

/**
 * 注释：混淆插件
 * 时间：2023/4/16 16:17
 * 作者：郭翰林
 */
task proguardPlugin(type: ProGuardTask, dependsOn: composedJar) {
    printmapping "$buildDir/mapping.txt"
    //配置混淆文件规则
    configuration 'proguard-rules.pro'
    //指定不混淆JDK
    libraryjars("${System.getProperty("java.home")}/jmods")
    //参与混淆的类
    String inputDir = "$buildDir/libs"
    injars "$inputDir/${project.name}-${version}.jar"
    //混淆后的文件(Class 或其它)输出目录
    String outDir = "$buildDir/proguard-classes"
    delete outDir
    outjars outDir
    // 在本task的execute阶段，将混淆后的class文件替换正常class文件
    doLast {
        // 删除原有的class文件
        delete "$inputDir"
        // 将混淆class文件复制过去
        copy {
            from outDir
            into inputDir
        }
    }
}


//Task任务顺序指定
tasks.buildPlugin.dependsOn.add(tasks.clean)

project.tasks.configureEach { Task currentTask ->
    if (currentTask.name == "prepareSandbox") {
        currentTask.dependsOn('proguardPlugin')
        currentTask.mustRunAfter('proguardPlugin')
    }
}